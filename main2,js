let calculationResults = null;
let currentVisualizationMode = '2d';
let scene, camera, renderer, controls;
let boxMeshes = [];
let containerMesh = null;
let animationId = null;

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    initializeJiffyAnimations();
    setupEventListeners();
    updateContainerVolume(); // Initialize container volume display
});

function initializeJiffyAnimations() {
    // Add entrance animations to cards
    const cards = document.querySelectorAll('.glass-card');
    cards.forEach((card, index) => {
        setTimeout(() => {
            card.classList.add('jiffy-fade-in');
        }, index * 100);
    });

    // Add hover effects to interactive elements
    const buttons = document.querySelectorAll('button');
    buttons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            this.classList.add('jiffy-hover-lift');
        });
        
        button.addEventListener('mouseleave', function() {
            this.classList.remove('jiffy-hover-lift');
        });
    });

    // Add input field animations
    const inputs = document.querySelectorAll('input');
    inputs.forEach(input => {
        input.addEventListener('focus', function() {
            this.classList.add('jiffy-zoom-in');
        });
        
        input.addEventListener('blur', function() {
            this.classList.remove('jiffy-zoom-in');
        });
    });
}

function setupEventListeners() {
    // Radio button change listeners
    const radioButtons = document.querySelectorAll('input[name="layoutPattern"]');
    radioButtons.forEach(radio => {
        radio.addEventListener('change', function() {
            this.closest('.radio-card').classList.add('jiffy-bounce');
            setTimeout(() => {
                this.closest('.radio-card').classList.remove('jiffy-bounce');
            }, 600);
        });
    });

    // Checkbox listeners
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            this.closest('label').classList.add('jiffy-pulse');
            setTimeout(() => {
                this.closest('label').classList.remove('jiffy-pulse');
            }, 2000);
        });
    });

    // Initialize container panel as collapsed
    document.getElementById('containerInputs').style.display = 'none';
}

function toggleContainerPanel() {
    const inputs = document.getElementById('containerInputs');
    const isHidden = inputs.style.display === 'none';
    
    if (isHidden) {
        inputs.style.display = 'grid';
        inputs.classList.add('jiffy-slide-up');
    } else {
        inputs.style.display = 'none';
        inputs.classList.remove('jiffy-slide-up');
    }
    
    // Reset calculation results when container size changes
    if (calculationResults) {
        calculationResults = null;
        document.getElementById('resultsContainer').innerHTML = `
            <div class="text-center text-white/50 py-12">
                <div class="text-8xl mb-6 jiffy-pulse">üì¶</div>
                <p class="text-xl font-medium jiffy-fade-in">Ukuran kontainer diubah. Klik "Hitung Layout Optimal" untuk hasil baru</p>
            </div>
        `;
        document.getElementById('visualizationContainer').innerHTML = `
            <div class="text-center text-white/50">
                <div class="text-7xl lg:text-8xl mb-6 jiffy-pulse">üé®</div>
                <p class="text-xl lg:text-2xl font-medium jiffy-fade-in">Visualisasi akan muncul setelah perhitungan</p>
            </div>
        `;
    }
}

function updateContainerVolume() {
    const length = parseFloat(document.getElementById('containerLength').value) || 0;
    const width = parseFloat(document.getElementById('containerWidth').value) || 0;
    const height = parseFloat(document.getElementById('containerHeight').value) || 0;
    
    const volume = (length * width * height) / 1000000; // Convert to m¬≥
    document.getElementById('containerVolume').textContent = volume.toFixed(2) + ' m¬≥';
}

function showJiffyAlert(message, type = 'info') {
    const alert = document.createElement('div');
    alert.className = `jiffy-alert ${type} show`;
    
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è'
    };
    
    alert.innerHTML = `
        <div class="flex items-center gap-3">
            <span class="text-xl">${icons[type]}</span>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(alert);
    
    setTimeout(() => {
        alert.classList.add('jiffy-fade-out');
        setTimeout(() => {
            if (alert.parentNode) {
                alert.parentNode.removeChild(alert);
            }
        }, 300);
    }, 3000);
}

function calculateOptimalLayout() {
    const button = event.target;
    button.classList.add('jiffy-pulse');
    setTimeout(() => button.classList.remove('jiffy-pulse'), 2000);

    // Get input values
    const containerL = parseFloat(document.getElementById('containerLength').value);
    const containerW = parseFloat(document.getElementById('containerWidth').value);
    const containerH = parseFloat(document.getElementById('containerHeight').value);
    
    const boxL = parseFloat(document.getElementById('boxLength').value);
    const boxW = parseFloat(document.getElementById('boxWidth').value);
    const boxH = parseFloat(document.getElementById('boxHeight').value);
    
    const allowRotation = document.getElementById('allowRotation').checked;
    const selectedPattern = document.querySelector('input[name="layoutPattern"]:checked').value;

    // Basic validation
    if (!boxL || !boxW || !boxH || boxL <= 0 || boxW <= 0 || boxH <= 0) {
        showJiffyAlert('Mohon isi semua ukuran kotak dengan benar!', 'error');
        return;
    }

    // Show loading state with professional animation
    document.getElementById('resultsContainer').innerHTML = `
        <div class="text-center py-12 jiffy-fade-in">
            <div class="loading-spinner mx-auto mb-6">
                <div class="w-12 h-12 border-4 border-blue-500 border-l-transparent rounded-full animate-spin"></div>
            </div>
            <p class="text-xl font-semibold text-white mb-2 jiffy-slide-up">Menghitung layout ${selectedPattern}...</p>
            <div class="w-64 mx-auto bg-white/10 rounded-full h-2 mb-4">
                <div class="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full animate-progress"></div>
            </div>
            <p class="text-sm text-white/60 jiffy-fade-in jiffy-stagger-1">AI sedang menganalisis konfigurasi optimal</p>
            <div class="flex justify-center gap-1 mt-4">
                <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style="animation-delay: 0s"></div>
                <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style="animation-delay: 0.4s"></div>
            </div>
        </div>
    `;

    // Calculate scenarios
    setTimeout(() => {
        const scenarios = [];
        let optimal;

        if (selectedPattern === 'optimal') {
            const normal = calculateScenario(containerL, containerW, containerH, boxL, boxW, boxH, 'Normal', false);
            scenarios.push(normal);

            if (allowRotation) {
                const rotated = calculateScenario(containerL, containerW, containerH, boxW, boxL, boxH, 'Rotasi 90¬∞', true);
                scenarios.push(rotated);
                
                const mixed = calculateMixedLayout(containerL, containerW, containerH, boxL, boxW, boxH);
                scenarios.push(mixed);
            }

            optimal = scenarios.reduce((best, current) => 
                current.totalBoxes > best.totalBoxes ? current : best
            );
        } else {
            switch (selectedPattern) {
                case 'normal':
                    optimal = calculateScenario(containerL, containerW, containerH, boxL, boxW, boxH, 'Normal', false);
                    break;
                case 'zigzag':
                    optimal = calculateZigZagLayout(containerL, containerW, containerH, boxL, boxW, boxH);
                    break;
                case 'offset':
                    optimal = calculateOffsetLayout(containerL, containerW, containerH, boxL, boxW, boxH);
                    break;
            }
            scenarios.push(optimal);
        }

        // Calculate metrics
        const containerVolume = containerL * containerW * containerH;
        const boxVolume = boxL * boxW * boxH;
        const wastedSpace = containerVolume - (optimal.totalBoxes * boxVolume);

        calculationResults = {
            scenarios: scenarios,
            optimal: optimal,
            containerDimensions: { length: containerL, width: containerW, height: containerH },
            boxDimensions: { length: boxL, width: boxW, height: boxH },
            metrics: {
                containerVolume: containerVolume,
                boxVolume: boxVolume,
                wastedSpace: wastedSpace,
                spaceSavings: ((optimal.totalBoxes * boxVolume) / containerVolume * 100).toFixed(1)
            }
        };

        displayResults();
        createVisualization();
        showJiffyAlert('Perhitungan selesai! Layout optimal ditemukan', 'success');
    }, 2000);
}

// [Rest of your existing functions remain the same, but with updated class names to match the new UI]
// The calculation logic doesn't need to change, just the UI-related code

function displayResults() {
    const container = document.getElementById('resultsContainer');
    const { scenarios, optimal, metrics } = calculationResults;
    
    let html = `
        <div class="p-6 rounded-2xl border-l-4 border-green-500 mb-8 jiffy-success" style="background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(59, 130, 246, 0.1));">
            <h3 class="text-2xl font-bold text-white mb-4 flex items-center">
                <span class="w-10 h-10 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white mr-3 jiffy-pulse">üèÜ</span>
                Layout Optimal: ${optimal.name}
            </h3>
            <div class="grid grid-cols-2 gap-6 mb-6">
                <div class="text-center jiffy-bounce jiffy-stagger-1">
                    <div class="text-4xl font-bold gradient-text">${optimal.totalBoxes}</div>
                    <div class="text-sm font-semibold text-white/70">Total MC</div>
                </div>
                <div class="text-center jiffy-bounce jiffy-stagger-2">
                    <div class="text-4xl font-bold gradient-text">${optimal.efficiency}%</div>
                    <div class="text-sm font-semibold text-white/70">Efisiensi</div>
                </div>
                <div class="text-center jiffy-bounce jiffy-stagger-3">
                    <div class="text-2xl font-bold text-white">${optimal.boxesPerLayer}</div>
                    <div class="text-sm font-semibold text-white/70">Kotak per Sap</div>
                </div>
                <div class="text-center jiffy-bounce jiffy-stagger-4">
                    <div class="text-2xl font-bold text-white">${optimal.layers}</div>
                    <div class="text-sm font-semibold text-white/70">Tinggi Sap</div>
                </div>
            </div>
        </div>

        <div class="p-6 rounded-2xl mb-8 jiffy-slide-up" style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1));">
            <h4 class="text-2xl font-bold text-white mb-6 flex items-center">
                <span class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white mr-3 jiffy-pulse">üìä</span>
                Analisis Mendalam
            </h4>
            <div class="grid grid-cols-2 gap-6">
                <div class="glass-card p-4 rounded-xl jiffy-hover-lift jiffy-fade-in jiffy-stagger-1">
                    <div class="text-white/80 font-semibold mb-1">Volume Kontainer</div>
                    <div class="text-2xl font-bold gradient-text">${(metrics.containerVolume / 1000000).toFixed(2)} m¬≥</div>
                </div>
                <div class="glass-card p-4 rounded-xl jiffy-hover-lift jiffy-fade-in jiffy-stagger-2">
                    <div class="text-white/80 font-semibold mb-1">Volume Terpakai</div>
                    <div class="text-2xl font-bold text-green-400">${metrics.spaceSavings}%</div>
                </div>
                <div class="glass-card p-4 rounded-xl jiffy-hover-lift jiffy-fade-in jiffy-stagger-3">
                    <div class="text-white/80 font-semibold mb-1">Ruang Terbuang</div>
                    <div class="text-2xl font-bold text-red-400">${(metrics.wastedSpace / 1000000).toFixed(2)} m¬≥</div>
                </div>
                <div class="glass-card p-4 rounded-xl jiffy-hover-lift jiffy-fade-in jiffy-stagger-4">
                    <div class="text-white/80 font-semibold mb-1">Kotak per m¬≥</div>
                    <div class="text-2xl font-bold text-purple-400">${(optimal.totalBoxes / (metrics.containerVolume / 1000000)).toFixed(0)}</div>
                </div>
            </div>
        </div>
        
        <div class="space-y-4 jiffy-slide-up">
            <h4 class="text-xl font-bold text-white flex items-center">
                <span class="w-8 h-8 bg-gradient-to-r from-gray-500 to-gray-700 rounded-full flex items-center justify-center text-white text-sm mr-3 jiffy-pulse">üìã</span>
                Perbandingan Semua Skenario
            </h4>
    `;
    
    scenarios.forEach((scenario, index) => {
        const isOptimal = scenario === optimal;
        html += `
            <div class="glass-card p-4 rounded-xl border-2 ${isOptimal ? 'border-green-400' : 'border-white/10'} jiffy-fade-in jiffy-stagger-${index + 1} jiffy-hover-lift">
                <div class="flex justify-between items-center mb-3">
                    <span class="text-lg font-bold ${isOptimal ? 'text-green-400' : 'text-white'}">${scenario.name}</span>
                    ${isOptimal ? '<span class="bg-gradient-to-r from-green-500 to-blue-500 text-white px-3 py-1 rounded-full text-xs font-bold jiffy-bounce">OPTIMAL ‚ú®</span>' : ''}
                </div>
                <div class="grid grid-cols-4 gap-4 text-sm">
                    <div class="text-center">
                        <div class="font-bold text-xl ${isOptimal ? 'text-green-400' : 'text-white'}">${scenario.totalBoxes}</div>
                        <div class="text-white/60">Total</div>
                    </div>
                    <div class="text-center">
                        <div class="font-bold text-lg text-white">${scenario.boxesPerLayer}</div>
                        <div class="text-white/60">Per Sap</div>
                    </div>
                    <div class="text-center">
                        <div class="font-bold text-lg text-white">${scenario.layers}</div>
                        <div class="text-white/60">Jumlah Sap</div>
                    </div>
                    <div class="text-center">
                        <div class="font-bold text-lg ${isOptimal ? 'text-blue-400' : 'text-white'}">${scenario.efficiency}%</div>
                        <div class="text-white/60">Efisiensi</div>
                    </div>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    container.innerHTML = html;
}

// [Rest of your existing functions remain the same]
